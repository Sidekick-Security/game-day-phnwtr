# Scenario Service Deployment Configuration
# Version: 1.0.0
# Purpose: Manages AI-driven scenario generation with enhanced resource allocation and security
# Dependencies: 
# - istio/proxyv2:1.20.0 (Service Mesh)
# - configmap.yaml (Configuration)
# - secret.yaml (Sensitive Data)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: scenario-service
  namespace: gameday
  labels:
    app: scenario-service
    tier: backend
    component: ai-engine
    version: "1.0.0"
    environment: production
  annotations:
    sidecar.istio.io/inject: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
    security.kubernetes.io/tls-version: "1.3"
    backup.kubernetes.io/schedule: "0 2 * * *"
    monitoring.kubernetes.io/alerts: "cpu_threshold,memory_threshold,error_rate"

spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  selector:
    matchLabels:
      app: scenario-service
      tier: backend
  
  template:
    metadata:
      labels:
        app: scenario-service
        tier: backend
        component: ai-engine
        version: "1.0.0"
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    
    spec:
      serviceAccountName: scenario-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: scenario-service
        image: gameday/scenario-service:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        resources:
          requests:
            cpu: "1000m"
            memory: "1Gi"
          limits:
            cpu: "4"
            memory: "4Gi"
        
        envFrom:
        - configMapRef:
            name: scenario-service-config
        - secretRef:
            name: scenario-service-secret
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir:
          medium: Memory
          sizeLimit: 1Gi
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - scenario-service
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - c5.xlarge
                - c5.2xlarge
      
      terminationGracePeriodSeconds: 60
      
      tolerations:
      - key: "ai-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"