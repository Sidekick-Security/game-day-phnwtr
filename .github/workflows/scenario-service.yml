name: Scenario Service CI/CD

# Trigger on pushes to main and PRs affecting scenario service
on:
  push:
    branches: [main]
    paths:
      - 'src/backend/src/scenario-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/backend/src/scenario-service/**'

# Define permissions required for the workflow
permissions:
  contents: read
  packages: write
  id-token: write
  deployments: write

# Ensure only one workflow runs at a time per ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  IMAGE_NAME: scenario-service
  REGISTRY: ghcr.io/${{ github.repository }}
  CACHE_KEY_PREFIX: scenario-service-${{ github.ref }}
  MAX_IMAGE_SIZE: 500

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/src/scenario-service/requirements.txt'

      - name: Install dependencies
        working-directory: src/backend/src/scenario-service
        run: |
          python -m pip install --upgrade pip==23.2.1
          pip install -r requirements.txt

      - name: Run linting
        working-directory: src/backend/src/scenario-service
        run: |
          black --check .
          isort --check-only .
          flake8 . --max-line-length=88 --extend-ignore=E203

      - name: Run type checking
        working-directory: src/backend/src/scenario-service
        run: |
          mypy . --strict --ignore-missing-imports

      - name: Run tests
        working-directory: src/backend/src/scenario-service
        run: |
          pytest --cov=. --cov-report=xml --cov-fail-under=90

      - name: Run Snyk security scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=high

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            src/backend/src/scenario-service/coverage.xml
            src/backend/src/scenario-service/.coverage

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: src/backend/src/scenario-service
          file: src/backend/src/scenario-service/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ env.CACHE_KEY_PREFIX }}
          cache-to: type=gha,mode=max,scope=${{ env.CACHE_KEY_PREFIX }}
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.build-date }}

      - name: Run Snyk container scan
        uses: snyk/actions/docker@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --severity-threshold=critical --fail-on=critical

      - name: Verify image size
        run: |
          size=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --format='{{.Size}}')
          size_mb=$((size/1024/1024))
          if [ $size_mb -gt ${{ env.MAX_IMAGE_SIZE }} ]; then
            echo "Image size ${size_mb}MB exceeds limit of ${MAX_IMAGE_SIZE}MB"
            exit 1
          fi

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.gameday.example.com/scenario

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name gameday-cluster --region us-west-2

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/scenario-service \
            scenario-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/scenario-service --timeout=300s

      - name: Run post-deployment tests
        run: |
          curl -f https://api.gameday.example.com/scenario/health || exit 1

      - name: Configure monitoring alerts
        run: |
          aws cloudwatch put-metric-alarm \
            --alarm-name scenario-service-health \
            --metric-name HealthyHostCount \
            --namespace AWS/ApplicationELB \
            --statistic Average \
            --period 60 \
            --threshold 1 \
            --comparison-operator LessThanThreshold \
            --evaluation-periods 2 \
            --alarm-actions ${{ secrets.ALARM_TOPIC_ARN }}