name: Analytics Service CI/CD

on:
  push:
    branches: 
      - main
      - 'release/*'
    paths:
      - 'src/backend/src/analytics-service/**'
  pull_request:
    branches: 
      - main
      - develop
    paths:
      - 'src/backend/src/analytics-service/**'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  IMAGE_NAME: analytics-service
  TEST_PARALLEL_JOBS: 4
  COVERAGE_THRESHOLD: 80
  CACHE_DURATION: '24h'

concurrency:
  group: analytics-service-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        shard: [1/4, 2/4, 3/4, 4/4]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/src/analytics-service/requirements.txt'

      - name: Install dependencies
        working-directory: src/backend/src/analytics-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-split

      - name: Run tests with coverage
        working-directory: src/backend/src/analytics-service
        run: |
          pytest --split-by-file --splits ${{ env.TEST_PARALLEL_JOBS }} --split-index ${{ matrix.shard }} \
                --cov=. --cov-report=xml:coverage-${{ matrix.shard }}.xml \
                --junitxml=test-results-${{ matrix.shard }}.xml

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.shard }}
          path: src/backend/src/analytics-service/coverage-${{ matrix.shard }}.xml
          retention-days: 1

  coverage-report:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports

      - name: Merge coverage reports
        run: |
          pip install coverage
          coverage combine coverage-reports/coverage-*/coverage-*.xml
          coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }}
          coverage xml -o coverage.xml

      - name: Upload final coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Snyk security scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

      - name: Run Bandit SAST scan
        working-directory: src/backend/src/analytics-service
        run: |
          pip install bandit
          bandit -r . -ll -ii -f json -o bandit-results.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            src/backend/src/analytics-service/bandit-results.json
          retention-days: 7

  build:
    name: Build and Push Image
    needs: [coverage-report, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/backend/src/analytics-service
          file: src/backend/src/analytics-service/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha,scope=analytics-service
          cache-to: type=gha,mode=max,scope=analytics-service

  deploy:
    name: Deploy to Environment
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        environment: [development, staging, production]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f infrastructure/kubernetes/analytics-service/deployment.yaml
          kubectl apply -f infrastructure/kubernetes/analytics-service/service.yaml
          kubectl set image deployment/analytics-service \
            analytics-service=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/analytics-service --timeout=300s

      - name: Run smoke tests
        run: |
          curl -f http://analytics-service.${ENVIRONMENT}.svc.cluster.local:8002/health || exit 1
        env:
          ENVIRONMENT: ${{ matrix.environment }}