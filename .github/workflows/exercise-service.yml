name: Exercise Service CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'src/backend/src/exercise-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/backend/src/exercise-service/**'

env:
  # Node.js version for service runtime
  NODE_VERSION: '20'
  # Path to exercise service source code
  SERVICE_PATH: 'src/backend/src/exercise-service'
  # Container image name
  IMAGE_NAME: 'exercise-service'
  # AWS region for services
  AWS_REGION: 'us-east-1'
  # AWS ECR repository URL (populated during workflow)
  DOCKER_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # v4 (2023)
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4 # v4 (2023)
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ env.SERVICE_PATH }}
          npm run lint

      - name: Run tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          npm run test
        env:
          CI: true

      - name: Run security scan
        run: |
          cd ${{ env.SERVICE_PATH }}
          npm audit
          npm audit fix --force
          npx snyk test --severity-threshold=high

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # v4 (2023)
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        uses: docker/login-action@v3 # v3 (2023)
        with:
          registry: ${{ env.DOCKER_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3 (2023)
        with:
          buildkitd-flags: --debug

      - name: Build and push
        uses: docker/build-push-action@v5 # v5 (2023)
        with:
          context: ${{ env.SERVICE_PATH }}
          file: ${{ env.SERVICE_PATH }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Update kube config
        run: |
          aws eks update-kubeconfig --name gameday-cluster --region ${{ env.AWS_REGION }}

      - name: Update deployment image
        run: |
          # Update the image tag in the deployment manifest
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" \
            infrastructure/kubernetes/exercise-service/deployment.yaml

      - name: Deploy to EKS
        run: |
          # Apply deployment configuration
          kubectl apply -f infrastructure/kubernetes/exercise-service/deployment.yaml
          
          # Verify deployment rollout
          kubectl rollout status deployment/exercise-service -n gameday-platform --timeout=5m
          
          # Log deployment status
          echo "Deployment completed successfully at $(date)"